{"pageProps":{"markdoc":{"content":[{"$$mdtype":"Tag","name":"p","attributes":{},"children":["Using the devfile library, you can parse and write any devfile, helping"," ","you maintain consistent development environments and making it easier"," ","for teams to collaborate across shared projects."]},{"$$mdtype":"Tag","name":"h2","attributes":{"id":"procedure"},"children":["Procedure"]},{"$$mdtype":"Tag","name":"ul","attributes":{},"children":[{"$$mdtype":"Tag","name":"li","attributes":{},"children":["Parse a devfile by running:"]}]},{"$$mdtype":"Tag","name":"Fence","attributes":{"language":"go"},"children":["// ParserArgs is the struct to pass into parser functions \n// which contains required info for parsing devfile.\nparserArgs := parser.ParserArgs{\n  Path:             path,\n  FlattenedDevfile: &flattenedDevfile,\n  RegistryURLs:     registryURLs,\n  DefaultNamespace: defaultNamespace,\n  Context:          context,\n  K8sClient:        client,\n}\n\n// Parses the devfile and validates the devfile data\n// if top-level variables are not substituted successfully, \n// the warnings can be logged by parsing variableWarning\ndevfile, variableWarning, err := devfilePkg.ParseDevfileAndValidate(parserArgs)\n"]},{"$$mdtype":"Tag","name":"ul","attributes":{},"children":[{"$$mdtype":"Tag","name":"li","attributes":{},"children":["Get specific content from a devfile by running:"]}]},{"$$mdtype":"Tag","name":"Fence","attributes":{"language":"go"},"children":["// To get all the components from the devfile\ncomponents, err := devfile.Data.GetComponents(DevfileOptions{})\n\n// To get all the components from the devfile with \n// attributes tagged - tool: console-import\n// & import: {strategy: Dockerfile}\ncomponents, err := devfile.Data.GetComponents(DevfileOptions{\n  Filter: map[string]interface{}{\n    \"tool\": \"console-import\",\n    \"import\": map[string]interface{}{\n      \"strategy\": \"Dockerfile\",\n    },\n  },\n})\n\n// To get all the volume components\ncomponents, err := devfile.Data.GetComponents(DevfileOptions{\n  ComponentOptions: ComponentOptions{\n    ComponentType: v1.VolumeComponentType,\n  },\n})\n\n// To get all the exec commands that belong to the build group\ncommands, err := devfile.Data.GetCommands(DevfileOptions{\n  CommandOptions: CommandOptions{\n    CommandType:      v1.ExecCommandType,\n    CommandGroupKind: v1.BuildCommandGroupKind,\n },\n})\n"]},{"$$mdtype":"Tag","name":"ul","attributes":{},"children":[{"$$mdtype":"Tag","name":"li","attributes":{},"children":["Get the Kubernetes objects from the devfile by running:"]}]},{"$$mdtype":"Tag","name":"Fence","attributes":{"language":"go"},"children":["// To get a slice of Kubernetes containers of type \n// corev1.Container from the devfile component containers\ncontainers, err := generator.GetContainers(devfile)\n\n// To generate a Kubernetes deployment of type v1.Deployment\ndeployParams := generator.DeploymentParams{\n  TypeMeta:          generator.GetTypeMeta(deploymentKind, deploymentAPIVersion),\n  ObjectMeta:        generator.GetObjectMeta(name, namespace, labels, annotations),\n  InitContainers:    initContainers,\n  Containers:        containers,\n  Volumes:           volumes,\n  PodSelectorLabels: labels,\n}\ndeployment := generator.GetDeployment(deployParams)\n"]},{"$$mdtype":"Tag","name":"ul","attributes":{},"children":[{"$$mdtype":"Tag","name":"li","attributes":{},"children":["Update the devfile content by running:"]}]},{"$$mdtype":"Tag","name":"Fence","attributes":{"language":"go"},"children":["// To update an existing component in the devfile object\nerr := devfile.Data.UpdateComponent(v1.Component{\n  Name: \"component1\",\n  ComponentUnion: v1.ComponentUnion{\n    Container: &v1.ContainerComponent{\n      Container: v1.Container{\n        Image: \"image1\",\n      },\n    },\n  },\n})\n\n// To add a new component to the devfile object\nerr := devfile.Data.AddComponents([]v1.Component{\n  {\n    Name: \"component2\",\n    ComponentUnion: v1.ComponentUnion{\n      Container: &v1.ContainerComponent{\n        Container: v1.Container{\n          Image: \"image2\",\n        },\n      },\n    },\n  },\n})\n\n// To delete a component from the devfile object\nerr := devfile.Data.DeleteComponent(componentName)\n"]},{"$$mdtype":"Tag","name":"ul","attributes":{},"children":[{"$$mdtype":"Tag","name":"li","attributes":{},"children":["Write a devfile by running:"]}]},{"$$mdtype":"Tag","name":"Fence","attributes":{"language":"go"},"children":["// If the devfile object has been created with the devfile path \n// already set, can simply call WriteYamlDevfile to write the devfile\nerr := devfile.WriteYamlDevfile()\n\n\n// To write to a devfile from scratch\n// create a new DevfileData with a specific devfile version\ndevfileData, err := data.NewDevfileData(devfileVersion)\n\n// set schema version\ndevfileData.SetSchemaVersion(devfileVersion)\n\n// To add devfile content, use library APIs\ndevfileData.AddComponents([]v1.Component{...})\ndevfileData.AddCommands([]v1.Commands{...})\n......\n\n// create a new DevfileCtx\nctx := devfileCtx.NewDevfileCtx(devfilePath)\nerr = ctx.SetAbsPath()\n\n// create devfile object with the new DevfileCtx and DevfileData\ndevfile := parser.DevfileObj{\n  Ctx:  ctx,\n  Data: devfileData,\n}\n\n// write to the devfile on disk\nerr = devfile.WriteYamlDevfile()\n"]}],"frontmatter":{"title":"Library","description":"Library"},"file":{"path":"/docs/2.1.0/library.md"}}},"__N_SSG":true}